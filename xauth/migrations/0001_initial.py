# Generated by Django 5.0.4 on 2024-11-05 16:49

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('admin', 'ADMINISTRATEUR'), ('teacher', 'Enseignant'), ('vicePrésident', 'Vice President'), ('finance', 'Chaine financiere')], default='admin', max_length=20, verbose_name="Type d'utilisateur")),
                ('first_name', models.CharField(max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(max_length=100, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('birthdate', models.DateField(verbose_name='Date de naissance')),
                ('birthplace', models.CharField(max_length=50, verbose_name='Lieu de naissance')),
                ('matricule', models.CharField(max_length=50, unique=True)),
                ('address', models.CharField(blank=True, max_length=50, null=True, verbose_name='Adresse')),
                ('photo', models.ImageField(blank=True, help_text="Une image dont la taille n'excède pas 3 Mo", null=True, upload_to='', verbose_name="Photo d'identité")),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True, verbose_name='Numéro de téléphone')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Est un(e) administrateur(e)')),
                ('is_teacher', models.BooleanField(default=False, verbose_name='Est un(e) enseignant(e)')),
                ('is_president', models.BooleanField(default=False, verbose_name='Est un(e) vice président(e)')),
                ('is_finance', models.BooleanField(default=False, verbose_name='Est une chaine financière')),
                ('marital_status', models.CharField(choices=[('bachelor', 'Célibataire'), ('married', 'Mariée'), ('divorced', 'Divorcée'), ('widower', 'Veuve')], default='bachelor', max_length=20, verbose_name='Situation matrimoniale')),
                ('nationality', models.CharField(blank=True, max_length=50, null=True, verbose_name='Nationalité')),
                ('gender', models.CharField(blank=True, choices=[('F', 'Femme'), ('H', 'Homme')], max_length=1, null=True, verbose_name='Genre')),
                ('teacher_type', models.CharField(blank=True, choices=[('vacataire', 'Vacataire'), ('permanent', 'Permanent')], help_text="Indiquez si l'enseignant est vacataire ou permanent", max_length=10, null=True, verbose_name="Type d'enseignant")),
                ('grade', models.CharField(blank=True, max_length=100, null=True, verbose_name='Grade')),
                ('diplome', models.CharField(blank=True, max_length=100, null=True, verbose_name='Diplôme')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'utilisateur',
                'verbose_name_plural': 'utilisateurs',
                'ordering': ['first_name', 'last_name'],
                'permissions': [('list_user', 'Can list user'), ('can_assign', 'Peut attribuer un rôle'), ('deactivate_user', 'Can deactivate user'), ('change_right_user', 'Can change user right'), ('access_parameter', 'Can access to parameter module'), ('access_account', 'Can access to account module'), ('can_submit_programmatic_sheet', 'Peut soumettre une fiche programmatique'), ('can_update_programmatic_sheet', 'Peut modifier une fiche programmatique'), ('can_delete_programmatic_sheet', 'Peut supprimer une fiche programmatique'), ('can_download_programmatic_sheet', 'peut telecharger une fiche programmatique'), ('can_export_programmatic_sheet', 'Peut exporter une fiche programmatique'), ('can_validate_programmatic_sheet', 'peut valider une fiche programmatique'), ('can_reject_programmatic_sheet', 'peut rejeter une fiche programmatique')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountActivationSecret',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True, verbose_name='Est actif')),
                ('secret', models.CharField(max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Assign',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('id', model_utils.fields.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True, verbose_name='Est actif')),
                ('nomination_date', models.DateField(null=True)),
                ('effective_date', models.DateField(null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('assigner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='assigner', to=settings.AUTH_USER_MODEL)),
                ('group_assign', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='auth.group')),
                ('unassigner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='unassigner', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='assign', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
